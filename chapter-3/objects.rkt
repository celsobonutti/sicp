#lang racket

(define balance 100)
(define (withdraw amount)
  (if (>= balance amount)
      (begin (set! balance (- balance amount))
             balance)
      "Insufficient funds"))

(define (make-withdraw balance)
  (λ (amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds")))

(define (make-account balance)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch m)
    (cond ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          ((eq? m 'check) balance)
          (else (error "Unknown request: MAKE-ACCOUNT"
                       m))))
  dispatch)

(define (make-accumulator value)
  (λ (n)
    (set! value (+ value n))
    value))

(define (make-monitored f)
  (let ((c 0))
    (define (dispatch m)
      (cond ((eq? m 'how-many-calls?) c)
            ((eq? m 'reset-count) (set! c 0))
            (else (begin (set! c (+ c 1))
                         (f m)))))
    dispatch))

(define (make-account-protected balance password)
  (let ((wrong-pwd-count 0))
    (define (withdraw amount)
      (if (>= balance amount)
          (begin (set! balance (- balance amount))
                 balance)
          "Insufficient funds"))
    (define (deposit amount)
      (set! balance (+ balance amount))
      balance)
    (define (wrong-password _)
      (begin
        (set! wrong-pwd-count (+ wrong-pwd-count 1))
        (if (>= wrong-pwd-count 7)
            (call-the-cops)
            (error "Wrong password"))))
    (define (call-the-cops)
      (println "CALLING THE COPS")
      (println "WEE WOO WEE WOO")
      (println "YOU'RE ARRESTED MOFO"))
    (define (dispatch passwd m)
      (if (eq? passwd password)
          (cond ((eq? m 'withdraw) withdraw)
                ((eq? m 'deposit) deposit)
                ((eq? m 'check) balance)
                (else (error "Unknown request: MAKE-ACCOUNT"
                             m)))
          wrong-password))
    dispatch))

(define (make-joint account password new-password)
  (λ (pwd m)
    (if (eq? pwd new-password)
        (account password m)
        (error "Wrong password"))))

(define (test x)
  (λ (y) (let ((result (+ x y)))
           (begin
             (set! x (* x 2))
             result))))

(define (make-withdraw-let initial-amount)
  (let ((balance initial-amount))
    (λ (amount)
      (if (>= balance amount)
          (begin (set! balance (- balance amount))
                 balance)
          "Insufficient funds"))))

;; (define (front-ptr queue) (mcar queue))
;; (define (rear-ptr queue) (mcdr queue))
;; (define (set-front-ptr! queue item)
;;   (set-mcar! queue item))
;; (define (set-rear-ptr! queue item)
;;   (set-mcdr! queue item))

;; (define (empty-queue? queue)
;;   (null? (front-ptr queue)))

;; (define (make-queue) (mcons '() '()))

;; (define (front-queue queue)
;;   (if (empty-queue? queue)
;;       (error "FRONT called with an empty queue" queue)
;;       (mcar (front-ptr queue))))

;; (define (insert-queue! queue item)
;;   (let ((new-pair (mcons item '())))
;;     (cond ((empty-queue? queue)
;;            (set-front-ptr! queue new-pair)
;;            (set-rear-ptr! queue new-pair)
;;            queue)
;;           (else
;;            (set-mcdr! (rear-ptr queue) new-pair)
;;            (set-rear-ptr! queue new-pair)
;;            queue))))

;; (define (delete-queue! queue)
;;   (cond ((empty-queue? queue)
;;          (error "DELETE! called with an empty queue" queue))
;;         (else (set-front-ptr! queue (mcdr (front-ptr queue)))
;;               queue)))

;; (define q (make-queue))

;; (define (print-queue queue)
;;   (println (mcar queue)))

(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (empty?)
      (null? front-ptr))
    (define (front)
      (if (empty?)
          (error "FRONT called with an empty queue")
          (mcar front-ptr)))
    (define (push item)
      (let ((new-item (mcons item '())))
        (cond ((empty?)
               (set! front-ptr new-item)
               (set! rear-ptr new-item)
               front-ptr)
              (else
               (set-mcdr! rear-ptr new-item)
               (set! rear-ptr new-item)
               front-ptr))))
    (define (pop)
      (cond ((empty?)
             (error "DELETE! called with an empty queue" front-ptr))
            (else
             (set! front-ptr (mcdr front-ptr))
             front-ptr)))
    (define (dispatch m)
      (case m
        ((empty?) (empty?))
        ((front) (front))
        ((push) push)
        ((pop) pop)
        (else (error "Undefined method"))))
    dispatch))

(define (mcaar x) (mcar (mcar x)))

(define (make-dequeue)
  (let ((front-ptr null)
        (rear-ptr null))
    (define (empty?)
      (null? front-ptr))
    (define (push-front item)
      (cond ((empty?)
             (let ((new-item (mcons (mcons item null) null)))
               (set! front-ptr new-item)
               (set! rear-ptr new-item)
               front-ptr))
            (else (let ((tmp (mcar front-ptr)))
                    (set! front-ptr (mcons (mcons item null) front-ptr))
                    (set-mcdr! tmp front-ptr)
                    front-ptr))))
    (define (push-rear item)
      (let ((new-item (mcons (mcons item null) null)))
        (cond ((empty?)
               (set! front-ptr new-item)
               (set! rear-ptr new-item)
               front-ptr)
              (else
               (set-mcdr! rear-ptr new-item)
               (set-mcdr! (mcar new-item) rear-ptr)
               (set! rear-ptr new-item)
               front-ptr))))
    (define (pop-front)
      (cond ((empty?)
             (error "POP-FRONT called with an empty dequeue"))
            (else
             (set! front-ptr (mcdr front-ptr))
             (if (mpair? front-ptr)
                 (set-mcdr! (mcar front-ptr) null)
                 (set! rear-ptr null))
             front-ptr)))
    (define (pop-rear)
      (cond ((empty?)
             (error "POP-FRONT called with an empty dequeue"))
            (else
             (set! rear-ptr (mcdr (mcar rear-ptr)))
             (if (mpair? rear-ptr)
                 (set-mcdr! rear-ptr null)
                 (set! front-ptr null))
             front-ptr)))
    (define (front)
      (if (empty?)
          null
          (mcaar front-ptr)))
    (define (rear)
      (if (empty?)
          null
          (mcaar rear-ptr)))
    (define (dispatch m)
      (case m
        ((empty?) (empty?))
        ((push-front) push-front)
        ((push-rear) push-rear)
        ((pop-front) pop-front)
        ((pop-rear) pop-rear)
        ((front) (front))
        ((rear) (rear))))
    dispatch))

