#lang racket

(define balance 100)
(define (withdraw amount)
  (if (>= balance amount)
      (begin (set! balance (- balance amount))
             balance)
      "Insufficient funds"))

(define (make-withdraw balance)
  (λ (amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds")))

(define (make-account balance)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch m)
    (cond ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          ((eq? m 'check) balance)
          (else (error "Unknown request: MAKE-ACCOUNT"
                       m))))
  dispatch)

(define (make-accumulator value)
  (λ (n)
    (set! value (+ value n))
    value))

(define (make-monitored f)
  (let ((c 0))
    (define (dispatch m)
      (cond ((eq? m 'how-many-calls?) c)
            ((eq? m 'reset-count) (set! c 0))
            (else (begin (set! c (+ c 1))
                         (f m)))))
    dispatch))

(define (make-account-protected balance password)
  (let ((wrong-pwd-count 0))
    (define (withdraw amount)
      (if (>= balance amount)
          (begin (set! balance (- balance amount))
                 balance)
          "Insufficient funds"))
    (define (deposit amount)
      (set! balance (+ balance amount))
      balance)
    (define (wrong-password _)
      (begin
        (set! wrong-pwd-count (+ wrong-pwd-count 1))
        (if (>= wrong-pwd-count 7)
            (call-the-cops)
            (error "Wrong password"))))
    (define (call-the-cops)
      (println "CALLING THE COPS")
      (println "WEE WOO WEE WOO")
      (println "YOU'RE ARRESTED MOFO"))
    (define (dispatch passwd m)
      (if (eq? passwd password)
          (cond ((eq? m 'withdraw) withdraw)
                ((eq? m 'deposit) deposit)
                ((eq? m 'check) balance)
                (else (error "Unknown request: MAKE-ACCOUNT"
                             m)))
          wrong-password))
    dispatch))

(define (make-joint account password new-password)
  (λ (pwd m)
    (if (eq? pwd new-password)
        (account password m)
        (error "Wrong password"))))

(define (test x)
  (λ (y) (let ((result (+ x y)))
           (begin
             (set! x (* x 2))
             result))))

(define (make-withdraw-let initial-amount)
  (let ((balance initial-amount))
    (λ (amount)
      (if (>= balance amount)
          (begin (set! balance (- balance amount))
                 balance)
          "Insufficient funds"))))
